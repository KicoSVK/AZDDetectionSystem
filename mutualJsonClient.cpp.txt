/*
 2016 Thirumal Venkat.
 https://github.com/zapstar/two-way-ssl-c/blob/master/main.c
 */
#include "mutualJsonClient.h"

#define BUFSIZE 8192

static SSL_CTX *get_client_context(const char *ca_pem,
                              const char *cert_pem,
                              const char *key_pem) {
    SSL_CTX *ctx;

    /* Create a generic context */
    if (!(ctx = SSL_CTX_new(SSLv23_client_method()))) {
        fprintf(stderr, "Cannot create a client context\n");
        return NULL;
    }

    /* Load the client's CA file location */
    if (SSL_CTX_load_verify_locations(ctx, ca_pem, NULL) != 1) {
        fprintf(stderr, "Cannot load client's CA file: %s \n", ca_pem);
        //goto fail;
        SSL_CTX_free(ctx);
        return NULL;
    }

    /* Load the client's certificate */
    if (SSL_CTX_use_certificate_file(ctx, cert_pem, SSL_FILETYPE_PEM) != 1) {
        fprintf(stderr, "Cannot load client's certificate file: %s \n", cert_pem);
        //goto fail;
        SSL_CTX_free(ctx);
        return NULL;
    }

    /* Load the client's key */
    if (SSL_CTX_use_PrivateKey_file(ctx, key_pem, SSL_FILETYPE_PEM) != 1) {
        fprintf(stderr, "Cannot load client's key file: %s \n", key_pem);
        //goto fail;
        SSL_CTX_free(ctx);
        return NULL;
    }

    /* Verify that the client's certificate and the key match */
    if (SSL_CTX_check_private_key(ctx) != 1) {
        fprintf(stderr, "Client's certificate and key don't match\n");
        //goto fail;
        SSL_CTX_free(ctx);
        return NULL;
    }

    /* We won't handle incomplete read/writes due to renegotiation */
    SSL_CTX_set_mode(ctx, SSL_MODE_AUTO_RETRY);

    /* Specify that we need to verify the server's certificate */
    SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, NULL);

    /* We accept only certificates signed only by the CA himself */
    SSL_CTX_set_verify_depth(ctx, 1);

    /* Done, return the context */
    return ctx;
}

void uploadImage(std::string imageName, const char *ipAddress){    
    int maxTimeToWait = 10000/50;
    std::string pathToImagesFolder = "/mnt/nvme/";
    std::string finalImageName = std::string(imageName) + ".jpg";
    std::string finalImageNameWindows = std::string(imageName) + ".jpg";

    std::string windowsFolderForImage = imageName.substr(0, imageName.find_last_of("//") + 1);   
    windowsFolderForImage = std::regex_replace(windowsFolderForImage, std::regex(R"(/)"), R"(\\)");
    
    finalImageNameWindows = std::regex_replace(finalImageNameWindows, std::regex(R"(/)"), R"(\\)");        
    std::string imagePath = pathToImagesFolder + finalImageName;    
   

    while(!fileExists(imagePath) && maxTimeToWait > 0)
    {
        usleep(50000);
        maxTimeToWait--;
    }  
    if (fileExists(imagePath))
    {        
        std::string commandToUploadImage = "sshpass -p 'camera' ssh -p 2222 camera@";
        commandToUploadImage += std::string(ipAddress);
        commandToUploadImage += std::string(" mkdir \\\\Images\\\\") + windowsFolderForImage;
        commandToUploadImage += " || sshpass -p 'camera' scp -P 2222 ";
        commandToUploadImage += imagePath;
        
        commandToUploadImage +=  " camera@";
        commandToUploadImage += std::string(ipAddress);
        commandToUploadImage += ":\\C:\\\\Images\\\\" + finalImageNameWindows;
        commandToUploadImage +=  " && rm " + imagePath;
        
        // std::cout << "commandToUploadImage" << commandToUploadImage << std::endl;
        system(commandToUploadImage.c_str());         
    }else{
        std::cout << "Image file to upload not exists: " << imageName << std::endl;
    }     
}

void uploadVideo(std::string videoName, const char *ipAddress){
    int maxTimeToWait = 300000/50;
    std::string pathToVideosFolder = "/mnt/nvme/";
    std::string finalVideoName = std::string(videoName) + ".mp4";
    std::string finalVideoNameWindows = std::string(videoName) + ".mp4";

    std::string windowsFolderForVideo = videoName.substr(0, videoName.find_last_of("//") + 1);   
    windowsFolderForVideo = std::regex_replace(windowsFolderForVideo, std::regex(R"(/)"), R"(\\)");
    
    finalVideoNameWindows = std::regex_replace(finalVideoNameWindows, std::regex(R"(/)"), R"(\\)");        
    std::string videoPath = pathToVideosFolder + finalVideoName;

    while(!fileExists(videoPath) && maxTimeToWait > 0)
    {
        usleep(50000);
        maxTimeToWait--;       

    }  
    if (fileExists(videoPath))
    {        
        std::string commandToUploadVideo = "sshpass -p 'camera' scp -P 2222 ";
        commandToUploadVideo += videoPath;       
        commandToUploadVideo += " camera@";
        commandToUploadVideo += std::string(ipAddress);
        commandToUploadVideo += ":\\C:\\\\Images\\\\" + finalVideoNameWindows;
        commandToUploadVideo += " && rm " + videoPath;
        system(commandToUploadVideo.c_str()); 
    }else{
        std::cout << "Video file to upload not exists: " << videoName << std::endl;
    }     
}



void mutualJsonClientSend(const char *ipAddress, const char *port, const char *ca_pem, const char *cert_pem, const char *key_pem, json eventJson){
    if(!eventJson["images"].is_null())
    {                
        if((sizeof(eventJson["images"]) / sizeof(eventJson["images"][0]))>0)
        {        
            
            for(int imagesIndex=0;imagesIndex<eventJson["images"].size(); imagesIndex++)
            {                            
                if(eventJson["images"][imagesIndex]["imageType"] == "image")
                {                    
                    std::string imageNameToUpload = std::string(eventJson["images"][imagesIndex]["id"]);
                    std::thread uploadImageThread(uploadImage, imageNameToUpload, ipAddress);                                      
                    uploadImageThread.detach();
                }else{                                   
                    std::string videoNameToUpload = std::string(eventJson["images"][imagesIndex]["id"]);
                    std::thread uploadVideoThread(uploadVideo, videoNameToUpload, ipAddress);
                    uploadVideoThread.detach();
                }
                std::string windowsPathImage = std::string(eventJson["images"][imagesIndex]["id"]);  
               
                windowsPathImage = std::regex_replace(windowsPathImage, std::regex(R"(/)"), R"(\)");  
                windowsPathImage = windowsPathImage.substr(windowsPathImage.find_last_of("\\") + 1);                
                eventJson["images"][imagesIndex]["id"] = windowsPathImage ;
            }            
        }else{
            std::cout << "Images in JSON are not exists!" << std::endl;
        }
    }
    else{
        std::cout << "Images in JSON are not exists!" << std::endl;
    }    
    
    static char buffer[BUFSIZE];
    SSL_CTX *ctx;
    BIO *sbio;
    SSL *ssl;
    size_t len;

    std::string sslStringCheck = "HTTP/1.1 204 No Content";
    
    // explicit conversion to string
    std::string eventJsonString = eventJson.dump(); 

    hash<string> hashString;    
    eventJson["hash"] = to_string(hashString(eventJsonString));
    eventJsonString = eventJson.dump();   
    cout << eventJsonString << endl;

    try
    {
        send(ipAddress, port, ca_pem, cert_pem, key_pem, eventJson, false);
    }
    catch (const std::exception& e) // caught by reference to base
    {
        std::cout << " a standard exception was caught, with message '"
                  << e.what() << "'\n";
    }
}

void mutualJsonClientSendStatus(const char *ipAddress, const char *port, const char *ca_pem, const char *cert_pem, const char *key_pem, json statusJson){ 
    try{
        send(ipAddress, port, ca_pem, cert_pem, key_pem, statusJson, true);
    }

    catch (const std::exception& e) // caught by reference to base
    {
        std::cout << " a standard exception was caught, with message '"
                  << e.what() << "'\n";
    }   
}

void send(const char *ipAddress, const char *port, const char *ca_pem, const char *cert_pem, const char *key_pem, json eventJson, bool statusMessage){    
    static char buffer[BUFSIZE];
    SSL_CTX *ctx;
    BIO *sbio;
    SSL *ssl;
    size_t len;
    /* Failure till we know it's a success */
    

    char conn_str[strlen(ipAddress)+strlen(port)+1];    
    

    strcpy(conn_str,ipAddress); 
    strcat(conn_str,":"); 
    strcat(conn_str,port);

    std::string sslStringCheck = "HTTP/1.1 204 No Content";    

    // explicit conversion to string
    std::string eventJsonString = eventJson.dump();    // {"happy":true,"pi":3.141}

    hash<string> hashString;    
    eventJson["hash"] = to_string(hashString(eventJsonString));
    eventJsonString = eventJson.dump();    // {"happy":true,"pi":3.141}
    // cout << eventJsonString << endl;

    /* Initialize OpenSSL */
    SSL_load_error_strings();
    OpenSSL_add_ssl_algorithms();
    
    /* Get a context */
    if (!(ctx = get_client_context(ca_pem, cert_pem, key_pem))) {
        return;
    }
   
    /* Get a BIO */
    if (!(sbio = BIO_new_ssl_connect(ctx))) {
        fprintf(stderr, "Could not get a BIO object from context\n");
        SSL_CTX_free(ctx);
        return;
    }
    
    /* Get the SSL handle from the BIO */
    BIO_get_ssl(sbio, &ssl);
   
    /* Connect to the server */
    if (BIO_set_conn_hostname(sbio, conn_str) != 1) {
        fprintf(stderr, "Could not connecto to the server\n");

        BIO_free_all(sbio);
        SSL_CTX_free(ctx);
        return;
    }
   
    /* Perform SSL handshake with the server */
    if (SSL_do_handshake(ssl) != 1) {
        fprintf(stderr, "SSL Handshake failed\n");
        
        // BIO_free_all(sbio);
        SSL_CTX_free(ctx);
        return;
    }
    
    /* Verify that SSL handshake completed successfully */
    if (SSL_get_verify_result(ssl) != X509_V_OK) {
        fprintf(stderr, "Verification of handshake failed\n");
        
        BIO_free_all(sbio);
        SSL_CTX_free(ctx);
        return;
    }

    /* Inform the user that we've successfully connected */
    // printf("SSL handshake successful with %s\n", conn_str);  

    std::string postString = "";
    if(statusMessage)
    {
        postString = "POST /api/status HTTP/1.1\r\nHost: ";
        postString += ipAddress;
        postString += "\r\nContent-Type: application/json\r\nContent-Length: ";
    }else
    {
        postString = "POST /api/event HTTP/1.1\r\nHost: ";
        postString += ipAddress;
        postString += "\r\nContent-Type: application/json\r\nContent-Length: ";
    }
        
    
    int jsonSize = eventJsonString.size();
    postString = postString + std::to_string(jsonSize);
    postString = postString + "\r\n\r\n";
    postString = postString + eventJsonString;    
    const char *cstr = postString.c_str();
    // std::cout << postString << std::endl;
    
    len = strlen(cstr);

    /* Write the input onto the SSL socket */
    if ((SSL_write(ssl, cstr, (int) len)) != (int)len) {
        fprintf(stderr, "Cannot write to the server\n");
                
        BIO_ssl_shutdown(sbio);
        BIO_free_all(sbio);
        SSL_CTX_free(ctx);
    }    
    /* Read from the server */
    if ((SSL_read(ssl, buffer, BUFSIZE)) < 0) {
        fprintf(stderr, "Cannot read from the server\n");
                
        BIO_ssl_shutdown(sbio);
        BIO_free_all(sbio);
        SSL_CTX_free(ctx);
    }else{
        /* Print message from server */
       
        if(strstr(buffer,sslStringCheck.c_str())!=NULL)
        {
            std::cout << "Message send!" << std::endl;            
        }else
        {
            std::cout << "During message send eror was occured!" << std::endl;
            std::cout << "Server replies: ";
            printf("%s \n", buffer);
            std::cout << std::endl;
            BIO_ssl_shutdown(sbio);
            // BIO_free_all(sbio);
            SSL_CTX_free(ctx);
        }            
    }    

    /* Cleanup and exit */
    // SSL_pending(ssl);
    // BIO_ssl_shutdown(sbio); //zruseno kvuli wait na data je to okey?
    BIO_free_all(sbio);
    SSL_CTX_free(ctx);
    return;
}


inline bool fileExists(const std::string& name) {
    struct stat buffer;
    return (stat(name.c_str(), &buffer) == 0);
}
